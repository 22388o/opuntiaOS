#pragma GCC system_header

#ifndef _LIBCXX_UTILITY
#define _LIBCXX_UTILITY

#include <__config>
#include <type_traits>

_LIBCXX_BEGIN_NAMESPACE_STD

template <typename T>
inline T&& move(T& arg)
{
    return static_cast<T&&>(arg);
}

template <typename T, typename U>
inline void swap(T& a, U& b)
{
    U tmp = move((U&)a);
    a = (T &&) move(b);
    b = move(tmp);
}

template <class T>
static constexpr T&& forward(std::remove_reference_t<T>& t) { return static_cast<T&&>(t); }

template <class T>
static constexpr T&& forward(std::remove_reference_t<T>&& t) { return static_cast<T&&>(t); }

struct in_place_t {
    explicit in_place_t() = default;
};
inline constexpr in_place_t in_place {};

_LIBCXX_END_NAMESPACE_STD

#endif // _LIBCXX_UTILITY