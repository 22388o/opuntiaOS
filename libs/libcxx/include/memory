#pragma GCC system_header

#ifndef _LIBCXX_MEMORY
#define _LIBCXX_MEMORY

#include <__config>
#include <cstddef>
#include <type_traits>
#include <utility>

_LIBCXX_BEGIN_NAMESPACE_STD

template <typename T>
class unique_ptr {
public:
    unique_ptr()
        : m_data(nullptr)
    {
    }

    unique_ptr(T* data)
        : m_data(data)
    {
    }

    unique_ptr(std::nullptr_t)
        : m_data(nullptr)
    {
    }

    unique_ptr& operator=(std::nullptr_t)
    {
        reset();
        return *this;
    }

    unique_ptr(unique_ptr&& moving) noexcept
        : m_data(nullptr)
    {
        moving.swap(*this);
    }

    unique_ptr& operator=(unique_ptr&& moving) noexcept
    {
        moving.swap(*this);
        return *this;
    }

    template <typename U>
    unique_ptr(unique_ptr<U>&& moving)
    {
        unique_ptr<T> tmp((T*)moving.release());
        tmp.swap(*this);
    }

    template <typename U>
    unique_ptr& operator=(unique_ptr<U>&& moving)
    {
        unique_ptr<T> tmp((T*)moving.release());
        tmp.swap(*this);
        return *this;
    }

    T* release() noexcept
    {
        T* result = m_data;
        m_data = nullptr;
        return result;
    }

    void swap(unique_ptr& src) noexcept
    {
        T* tmp_data = m_data;
        m_data = src.m_data;
        src.m_data = tmp_data;
    }

    void reset()
    {
        T* tmp = release();
        delete tmp;
    }

    ~unique_ptr()
    {
        delete m_data;
    }

    unique_ptr(unique_ptr const&) = delete;
    unique_ptr& operator=(unique_ptr const&) = delete;

    T* operator->() const { return m_data; }
    T& operator*() const { return *m_data; }

    T* get() const { return m_data; }
    explicit operator bool() const { return m_data; }

private:
    T* m_data { nullptr };
};

template <class T>
struct allocator {
    allocator() = default;
    ~allocator() = default;

    T* allocate(size_t n)
    {
        return operator new(n);
    }

    void deallocate(T* p, size_t n)
    {
        return delete (p, n);
    }
};

template <class T, class... Args>
constexpr T* construct_at(T* p, Args&&... args)
{
    return new (static_cast<void*>(p)) T(args...);
}

template <class T>
constexpr T* destroy_at(T* p)
{
    if constexpr (is_array_v<T>(p)) {
        static_assert("Not impmented destroy_at for array");
    }
    return p->~T();
}

_LIBCXX_END_NAMESPACE_STD

#endif // _LIBCXX_MEMORY